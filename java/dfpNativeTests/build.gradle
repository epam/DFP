plugins {
    id "me.champeau.jmh" version "0.7.1"
}

apply plugin: 'java'

group = 'com.epam.deltix'

sourceCompatibility = 8

repositories {
    mavenCentral()
}

sourceSets {
    test.java.srcDirs += [
        "$rootDir/java/dfp/build/generated/sources/nativeWrappers",
        "$rootDir/NativeUtils/java/main/src/main/java",
        "$rootDir/NativeUtils/Zstandard/java/src/main/java"]

    test.resources.srcDirs += "$rootDir/native/binJava/Release/"
}

dependencies {
    implementation project(":java:dfp")
    testImplementation project(':java:testUtils')
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.apache.commons:commons-math3:3.6.1'
//    testImplementation 'com.google.guava:guava:31.1-jre'
}

compileJava.dependsOn ":java:nativeWrappers:makeNativeWrappersDfp"

task copyNativeDfpResourcesMuslToAmd64(type: Copy) {
    from "$rootDir/native/bin/Release/linux/musl"
    into "$rootDir/native/binJava/Release/resources_com_epam_deltix_dfp/linux/amd64"
    include '**/*.so.zst'
}

task copyNativeDfpResources(type: Copy, dependsOn: copyNativeDfpResourcesMuslToAmd64) {
    from "$rootDir/native/bin/Release"
    into "$rootDir/native/binJava/Release/resources_com_epam_deltix_dfp"
    include '**/*.dylib.zst'
    include '**/*.so.zst'
    include '**/*.dll.zst'
    exclude 'linux/amd64/**'
    exclude 'linux/musl/**'
}
compileJava.dependsOn(copyNativeDfpResources)

task testsJar(type: Jar, dependsOn: [jar, testClasses, processTestResources]) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

task copyTestDeps(type: Copy) {
    from(sourceSets.test.runtimeClasspath) { include '*.jar' }
    into('testLibs')
}

task copyTestJars(type: Copy, dependsOn: [testsJar, copyTestDeps]) {
    from(jar.outputs.files)
    from(testsJar.outputs.files)
    into('testLibs')
}

task runTestJars(type: JavaExec) {
    mainClass = 'org.junit.runner.JUnitCore'
    classpath = files { file('testLibs').listFiles() }

    def testClassesRoot = file('src/test/java').absolutePath
    fileTree(dir: testClassesRoot, include: '**/*Test.java').each { File file ->
        def ap = file.absolutePath
        args += ap.substring(testClassesRoot.length() + 1, ap.length() - 5).replace(File.separator, '.')
    }
}
